// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/15/2023 15:20:04"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLOCK;
reg GO;
reg RESETN;
reg STOP;
// wires                                               
wire g_en;
wire [1:0] Q;
wire r_en;
wire y_en;

// assign statements (if any)                          
Lab2 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK(CLOCK),
	.g_en(g_en),
	.GO(GO),
	.Q(Q),
	.r_en(r_en),
	.RESETN(RESETN),
	.STOP(STOP),
	.y_en(y_en)
);
initial 
begin 
#1000000 $finish;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #25000 1'b1;
	#25000;
end 

// RESETN
initial
begin
	RESETN = 1'b1;
	RESETN = #840000 1'b0;
	RESETN = #50000 1'b1;
end 

// STOP
initial
begin
	STOP = 1'b0;
	STOP = #60000 1'b1;
	STOP = #50000 1'b0;
	STOP = #150000 1'b1;
	STOP = #80000 1'b0;
	STOP = #70000 1'b1;
	STOP = #110000 1'b0;
	STOP = #10000 1'b1;
	STOP = #60000 1'b0;
	STOP = #70000 1'b1;
	STOP = #140000 1'b0;
end 

// GO
initial
begin
	GO = 1'b0;
	GO = #160000 1'b1;
	GO = #50000 1'b0;
	GO = #50000 1'b1;
	GO = #280000 1'b0;
	GO = #60000 1'b1;
	GO = #40000 1'b0;
end 
endmodule

